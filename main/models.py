from django.db import models
from django.contrib.auth.models import User


class Client(models.Model):
    company_name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    contact_person = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ")
    phone = models.CharField(max_length=50, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    email = models.EmailField(blank=True, null=True, verbose_name="Email")
    telegram_id = models.BigIntegerField(blank=True, null=True, verbose_name="Telegram ID")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.company_name


class Service(models.Model):
    name = models.CharField(max_length=255, verbose_name="–£—Å–ª—É–≥–∞")
    description = models.TextField(blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    base_price = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True, verbose_name="–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞")
    has_kp = models.BooleanField(default=False, verbose_name="–í–∫–ª—é—á–∞—Ç—å –≤ –ö–ü")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name


class Request(models.Model):
    STATUS_CHOICES = [
        ('new', '–ù–æ–≤–∞—è'),
        ('in_progress', '–í —Ä–∞–±–æ—Ç–µ'),
        ('kp_ready', '–ö–ü –≥–æ—Ç–æ–≤–æ'),
        ('closed', '–ó–∞–∫—Ä—ã—Ç–∞'),
    ]

    client = models.ForeignKey(Client, on_delete=models.CASCADE, related_name='requests', verbose_name="–ö–ª–∏–µ–Ω—Ç")
    object_type = models.CharField(max_length=100, verbose_name="–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞")
    object_address = models.TextField(blank=True, null=True, verbose_name="–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞")
    area = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True, verbose_name="–ü–ª–æ—â–∞–¥—å, –º¬≤")
    
    description = models.TextField(blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞")  # üí¨ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    
    services = models.ManyToManyField(Service, through='RequestService', verbose_name="–£—Å–ª—É–≥–∏")
    status = models.CharField(max_length=50, choices=STATUS_CHOICES, default='new', verbose_name="–°—Ç–∞—Ç—É—Å")
    responsible_manager = models.ForeignKey(
        'crm.ManagerProfile',  # –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê ManagerProfile
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ú–µ–Ω–µ–¥–∂–µ—Ä"
    )
    attached_file = models.FileField(
        upload_to='kp_files/',
        blank=True,
        null=True,
        verbose_name="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"–ó–∞—è–≤–∫–∞ #{self.id} –æ—Ç {self.client.company_name}"


class RequestService(models.Model):
    request = models.ForeignKey(Request, on_delete=models.CASCADE)
    service = models.ForeignKey(Service, on_delete=models.RESTRICT)

    class Meta:
        unique_together = ('request', 'service')


class ManagerComment(models.Model):
    request = models.ForeignKey(Request, on_delete=models.CASCADE, related_name='comments')
    manager_user = models.ForeignKey(User, on_delete=models.CASCADE)
    comment = models.TextField(verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {self.manager_user} –∫ –∑–∞—è–≤–∫–µ {self.request_id}"


class Notification(models.Model):
    CHANNEL_CHOICES = [
        ('telegram', 'Telegram'),
        ('email', 'Email'),
    ]

    client = models.ForeignKey(Client, on_delete=models.SET_NULL, null=True, blank=True)
    request = models.ForeignKey(Request, on_delete=models.SET_NULL, null=True, blank=True)
    channel = models.CharField(max_length=50, choices=CHANNEL_CHOICES)
    message = models.TextField()
    sent_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=50, default='sent')

    def __str__(self):
        return f"{self.channel} -> {self.client or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"

class Project(models.Model):
    OBJECT_TYPES = [
        ('residential', '–ñ–∏–ª—ã–µ'),
        ('commercial', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ'),
        ('industrial', '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ'),
        ('medical', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ'),
        ('sports', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ'),
        ('other', '–ü—Ä–æ—á–∏–µ'),
    ]

    title = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    object_type = models.CharField(max_length=50, choices=OBJECT_TYPES, default='other', verbose_name="–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞")
    address = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ê–¥—Ä–µ—Å")
    image = models.ImageField(upload_to='projects/', blank=True, null=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title